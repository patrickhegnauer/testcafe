name: TestCafe Tests

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install

    - name: Get Adobe Access Token
      id: get_access_token
      run: |
        response=$(curl -X POST 'https://ims-na1.adobelogin.com/ims/token/v3' \
          -H 'Content-Type: application/x-www-form-urlencoded' \
          -d 'grant_type=client_credentials&client_id=${{ secrets.ADOBE_CLIENT_ID }}&client_secret=${{ secrets.ADOBE_CLIENT_SECRET }}&scope=openid,AdobeID,additional_info.projectedProductContext,assurance_manage_sessions,assurance_read_events,assurance_read_annotations,assurance_read_session_annotations,assurance_read_plugins,assurance_read_clients')
        access_token=$(echo $response | jq -r '.access_token')
        echo "::set-output name=access_token::$access_token"

    - name: Create Adobe Assurance Session
      id: create_session
      run: |
        access_token=${{ steps.get_access_token.outputs.access_token }}
        response=$(curl -X POST 'https://adobe-assurance-api-url/session' \
          -H 'Authorization: Bearer '$access_token'' \
          -H 'Content-Type: application/json' \
          -d '{"client_id": "'"${{ secrets.ADOBE_CLIENT_ID }}"'", "client_secret": "'"${{ secrets.ADOBE_CLIENT_SECRET }}"'"}')
        session_id=$(echo $response | jq -r '.session_id')
        echo "::set-output name=session_id::$session_id"

    - name: Run TestCafe tests
      run: |
        SESSION_ID=${{ steps.create_session.outputs.session_id }}
        echo "Session ID: $SESSION_ID"
        npx testcafe chrome tests/ --env.session_id=$SESSION_ID
